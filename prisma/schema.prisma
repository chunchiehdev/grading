generator client {
  provider = "prisma-client"
  output   = "../app/generated/prisma/client"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(uuid())
  email      String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  rubrics    Rubric[]
  uploads    Upload[]

  @@map("users")
}

model Rubric {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])

  name        String   @db.VarChar(255)
  description String   @db.Text
  criteria    Json     // [{ name, description, levels: [{ level, description, score }] }]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  uploads     Upload[]

  @@map("rubrics")
}

model Upload {
  id               String        @id @default(uuid())
  userId           String
  user             User          @relation(fields: [userId], references: [id])

  rubricId         String
  rubric           Rubric        @relation(fields: [rubricId], references: [id])

  originalFileName String
  storedFileKey    String        @unique
  storageLocation  String        // e.g. "s3://bucket/file.pdf" or "/uploads/uuid.pdf"
  fileSize         Int
  mimeType         String

  status           UploadStatus  @default(not_started)
  result           Json?

  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  @@index([userId])
  @@index([rubricId])
  @@map("uploads")
}

enum UploadStatus {
  not_started
  processing
  completed
  failed
}


