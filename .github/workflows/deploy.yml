name: Docker CI/CD
on:
  push:
    branches: 
      - "master" 
      - "development"

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name == 'master' && 'production' || 'development' }}
    steps:
    - name: Start Deployment
      run: |
        echo "Starting deployment process"
        echo "Branch: ${{ github.ref }}"
        echo "Commit: ${GITHUB_SHA::7}" 

    - uses: actions/checkout@v4
    
    - name: Auto-update version based on commit message
      id: version-update
      run: |
        COMMIT_MSG="${{ github.event.head_commit.message }}"
        echo "Commit message: $COMMIT_MSG"
        
        if [ "${{ github.ref_name }}" = "master" ]; then
          echo "üè≠ Processing master branch - production versioning"
          # Check for version bump indicators in commit message
          if [[ "$COMMIT_MSG" =~ ^feat(\(.+\))?!: ]] || [[ "$COMMIT_MSG" =~ BREAKING.CHANGE ]]; then
            echo "üöÄ BREAKING CHANGE detected - bumping major version"
            npm run version:major
            echo "BUMP_TYPE=major" >> $GITHUB_OUTPUT
          elif [[ "$COMMIT_MSG" =~ ^feat(\(.+\))?: ]]; then
            echo "‚ú® Feature detected - bumping minor version"
            npm run version:minor
            echo "BUMP_TYPE=minor" >> $GITHUB_OUTPUT
          elif [[ "$COMMIT_MSG" =~ ^fix(\(.+\))?: ]] || [[ "$COMMIT_MSG" =~ ^perf(\(.+\))?: ]]; then
            echo "üêõ Fix/perf detected - bumping patch version"
            npm run version:patch
            echo "BUMP_TYPE=patch" >> $GITHUB_OUTPUT
          else
            echo "üìù No version bump needed for this commit"
            echo "BUMP_TYPE=none" >> $GITHUB_OUTPUT
          fi
        else
          echo "üîß Processing development branch - prerelease versioning"
          # For development, always create a prerelease version
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"
          
          # Remove any existing prerelease suffix and add new one
          BASE_VERSION=$(echo "$CURRENT_VERSION" | sed 's/-dev\.[0-9]*$//')
          TIMESTAMP=$(date +%Y%m%d%H%M)
          NEW_VERSION="${BASE_VERSION}-dev.${TIMESTAMP}"
          
          echo "Creating development version: $NEW_VERSION"
          npm version "$NEW_VERSION" --no-git-tag-version
          echo "BUMP_TYPE=dev" >> $GITHUB_OUTPUT
        fi
      
    - name: Get version from package.json
      id: package-version
      run: |
        VERSION=$(node -p "require('./package.json').version")
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "Package version: $VERSION"
    
    - name: Commit version bump
      if: steps.version-update.outputs.BUMP_TYPE != 'none'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add package.json
        if [ "${{ github.ref_name }}" = "master" ]; then
          git commit -m "chore: bump version to ${{ steps.package-version.outputs.VERSION }} [${{ steps.version-update.outputs.BUMP_TYPE }}]"
        else
          git commit -m "chore: bump dev version to ${{ steps.package-version.outputs.VERSION }} [development]"
        fi
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        push: true
        build-args: |
          BUILD_BRANCH=${{ github.ref_name }}
          BUILD_COMMIT=${{ github.sha }}
          BUILD_TIME=${{ github.event.head_commit.timestamp }}
        tags: |
          chunchiehdev/gradsystem:${{ github.ref_name }}
          chunchiehdev/gradsystem:${{ steps.package-version.outputs.VERSION }}-${{ github.ref_name }}
          ${{ github.ref_name == 'master' && format('chunchiehdev/gradsystem:{0}', steps.package-version.outputs.VERSION) || '' }}

    - name: Deploy to K3s
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        script: |
          set +x  
          export KUBECONFIG=~/.kube/config
          echo "Starting application deployment for ${{ github.ref_name }} "
          echo "Version: ${{ steps.package-version.outputs.VERSION }}"
          
          # Set variables based on branch
          if [ "${{ github.ref_name }}" = "master" ]; then
            DEPLOYMENT_FILE="prod/deployment.yaml"
            SECRET_NAME="gradsystem-secret"
            NAMESPACE="default"
            DEPLOYMENT_NAME="gradsystem"
          else
            DEPLOYMENT_FILE="dev/deployment-dev.yaml"
            SECRET_NAME="gradsystem-secret-dev"
            NAMESPACE="dev"
            DEPLOYMENT_NAME="gradsystem-dev"
          fi
          
          echo "Using deployment file: $DEPLOYMENT_FILE"
          echo "Target namespace: $NAMESPACE"
          echo "Secret name: $SECRET_NAME"
          
          cd ~/gradsystem
          if [ -f $DEPLOYMENT_FILE ]; then
            
            echo "Running database migrations ..."
            kubectl run migrate-$(date +%s) \
              --rm \
              --attach \
              --restart=Never \
              --namespace=$NAMESPACE \
              --image=chunchiehdev/gradsystem:${{ github.ref_name }} \
              --env="DATABASE_URL=$(kubectl get secret $SECRET_NAME -n $NAMESPACE -o jsonpath='{.data.DATABASE_URL}' | base64 -d)" \
              --env="NODE_ENV=${{ github.ref_name == 'master' && 'production' || 'development' }}" \
              -- npx prisma migrate deploy --schema=/app/prisma/schema.prisma

            if [ $? -eq 0 ]; then
              echo "Migration successful, deploying application..."
              kubectl apply -f $DEPLOYMENT_FILE
              
              echo "Triggering rollout restart to pull latest image..."
              kubectl rollout restart deployment $DEPLOYMENT_NAME -n $NAMESPACE
              kubectl rollout status deployment $DEPLOYMENT_NAME -n $NAMESPACE
              echo "Deployment completed successfully!"
            else
              echo "Migration failed!"
              exit 1
            fi
          else
            echo "Error: $DEPLOYMENT_FILE file not found"
            exit 1
          fi
          
    - name: Push version bump and create tag
      if: steps.version-update.outputs.BUMP_TYPE != 'none'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git push origin ${{ github.ref_name }}
        
        if [ "${{ github.ref_name }}" = "master" ]; then
          echo "üè∑Ô∏è Creating production release tag"
          git tag -a v${{ steps.package-version.outputs.VERSION }} -m "Release v${{ steps.package-version.outputs.VERSION }}"
          git push origin v${{ steps.package-version.outputs.VERSION }}
        else
          echo "üè∑Ô∏è Creating development tag"
          git tag -a v${{ steps.package-version.outputs.VERSION }} -m "Development release v${{ steps.package-version.outputs.VERSION }}"
          git push origin v${{ steps.package-version.outputs.VERSION }}
        fi
    
    - name: Create tag for current version (master only, no version bump)
      if: github.ref_name == 'master' && steps.version-update.outputs.BUMP_TYPE == 'none'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag -a v${{ steps.package-version.outputs.VERSION }} -m "Release v${{ steps.package-version.outputs.VERSION }}"
        git push origin v${{ steps.package-version.outputs.VERSION }}
          
    - name: Deployment Summary
      run: |
        echo "üìù Deployment Summary"
        echo "-------------------"
        echo "‚úÖ Pipeline completed successfully"
        echo "Environment: ${{ github.ref_name == 'master' && 'production' || 'development' }}"
        echo "Branch: ${{ github.ref }}"
        echo "Version: ${{ steps.package-version.outputs.VERSION }}"
        echo "Version bump: ${{ steps.version-update.outputs.BUMP_TYPE }}"
        echo "Commit: ${{ github.sha }}"
        echo "Build time: ${{ github.event.head_commit.timestamp }}"
        
        if [ "${{ github.ref_name }}" = "master" ]; then
          echo "üè∑Ô∏è  Production release tag: v${{ steps.package-version.outputs.VERSION }}"
          echo "üéØ Versioning: Semantic versioning based on commit messages"
        else
          if [ "${{ steps.version-update.outputs.BUMP_TYPE }}" != "none" ]; then
            echo "üè∑Ô∏è  Development tag: v${{ steps.package-version.outputs.VERSION }}"
          fi
          echo "üéØ Versioning: Prerelease with timestamp for development tracking"
        fi

    - name: Handle Failure
      if: failure()
      run: |
        echo "‚ùå Deployment encountered an issue"
